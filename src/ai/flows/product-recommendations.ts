// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A product recommendation AI agent.
 *
 * - getProductRecommendations - A function that handles the product recommendation process.
 * - ProductRecommendationsInput - The input type for the getProductRecommendations function.
 * - ProductRecommendationsOutput - The return type for the getProductRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductRecommendationsInputSchema = z.object({
  productName: z.string().describe('The name of the viewed product.'),
  productDescription: z.string().describe('The description of the viewed product.'),
  productCategory: z.string().describe('The category of the viewed product.'),
  productImageUrl: z.string().describe('The URL of the viewed product image.'),
});
export type ProductRecommendationsInput = z.infer<typeof ProductRecommendationsInputSchema>;

const ProductRecommendationsOutputSchema = z.object({
  recommendedProducts: z.array(
    z.object({
      name: z.string().describe('The name of the recommended product.'),
      description: z.string().describe('The description of the recommended product.'),
      category: z.string().describe('The category of the recommended product.'),
      imageUrl: z.string().describe('The URL of the recommended product image.'),
      reason: z.string().describe('Why this product is recommended based on the viewed product.'),
    })
  ).describe('A list of recommended products based on the viewed product.'),
});
export type ProductRecommendationsOutput = z.infer<typeof ProductRecommendationsOutputSchema>;

export async function getProductRecommendations(input: ProductRecommendationsInput): Promise<ProductRecommendationsOutput> {
  return productRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationsPrompt',
  input: {schema: ProductRecommendationsInputSchema},
  output: {schema: ProductRecommendationsOutputSchema},
  prompt: `You are a product recommendation expert for an e-commerce website.

You will be provided with the details of a product that the user is currently viewing.
Your task is to suggest alternative or additional products that the user might be interested in, along with a brief explanation of why each product is recommended.

Viewed Product Name: {{{productName}}}
Viewed Product Description: {{{productDescription}}}
Viewed Product Category: {{{productCategory}}}
Viewed Product Image URL: {{{productImageUrl}}}

Based on the viewed product, recommend other products. The response should be a JSON array of objects, each containing the name, description, category, imageUrl and reason for recommendation.
`,
});

const productRecommendationsFlow = ai.defineFlow(
  {
    name: 'productRecommendationsFlow',
    inputSchema: ProductRecommendationsInputSchema,
    outputSchema: ProductRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
